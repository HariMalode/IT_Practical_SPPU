#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

pthread_mutex_t mutex;
int readers_count = 0;

void *reader(void *param)
{
    // Entry section
    pthread_mutex_lock(&mutex);
    readers_count++;
    if (readers_count == 1) {
        // First reader, lock for writers
        // This ensures that writers can't access while a reader is reading
        // Subsequent readers won't block each other
        // Reader priority
        // Writers will wait until the last reader leaves
        printf("First reader - Locking for writers\n");
    }
    pthread_mutex_unlock(&mutex);

    // Reading section
    printf("Reader reading\n");

    // Exit section
    pthread_mutex_lock(&mutex);
    readers_count--;
    if (readers_count == 0) {
        // Last reader, release lock for writers
        printf("Last reader - Unlocking for writers\n");
    }
    pthread_mutex_unlock(&mutex);

    pthread_exit(NULL);
}

void *writer(void *param)
{
    // Entry section
    pthread_mutex_lock(&mutex);
    printf("Writer trying to write\n");
    // Writers wait until all readers leave
    pthread_mutex_unlock(&mutex);

    // Writing section
    printf("Writer writing\n");

    // Exit section
    printf("Writer finished writing\n");

    pthread_exit(NULL);
}

int main()
{
    pthread_t reader_threads[3];
    pthread_t writer_threads[2];

    pthread_mutex_init(&mutex, NULL);

    // Create reader threads
    for (int i = 0; i < 3; i++) {
        pthread_create(&reader_threads[i], NULL, reader, NULL);
    }

    // Create writer threads
    for (int i = 0; i < 2; i++) {
        pthread_create(&writer_threads[i], NULL, writer, NULL);
    }

    // Join threads
    for (int i = 0; i < 3; i++) {
        pthread_join(reader_threads[i], NULL);
    }

    for (int i = 0; i < 2; i++) {
        pthread_join(writer_threads[i], NULL);
    }

    pthread_mutex_destroy(&mutex);

    return 0;
}
