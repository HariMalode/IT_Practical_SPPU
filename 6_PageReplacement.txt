#include <stdio.h>

// Global variables
int n, nf; // n: length of page reference sequence, nf: number of frames
int in[100]; // array to store page reference sequence
int p[50]; // array to represent page frames
int hit = 0; // flag to indicate whether a page is a hit or not
int i, j, k; // loop counters
int pgfaultcnt = 0; // page fault counter

// Function to get input data from the user
void getData() {
    printf("\nEnter length of page reference sequence:");
    scanf("%d", &n);
    printf("\nEnter the page reference sequence:");
    for (i = 0; i < n; i++)
        scanf("%d", &in[i]);
    printf("\nEnter no of frames:");
    scanf("%d", &nf);
}

// Function to initialize page replacement variables
void initialize() {
    pgfaultcnt = 0;
    for (i = 0; i < nf; i++)
        p[i] = 9999; // Initialize page frames with a placeholder value
}

// Function to check if a page is a hit or miss
int isHit(int data) {
    hit = 0;
    for (j = 0; j < nf; j++) {
        if (p[j] == data) {
            hit = 1;
            break;
        }
    }
    return hit;
}

// Function to get the index of a hit page in the page frames
int getHitIndex(int data) {
    int hitind;
    for (k = 0; k < nf; k++) {
        if (p[k] == data) {
            hitind = k;
            break;
        }
    }
    return hitind;
}

// Function to display the current page frames
void dispPages() {
    for (k = 0; k < nf; k++) {
        if (p[k] != 9999)
            printf(" %d", p[k]);
    }
}

// Function to display the total number of page faults
void dispPgFaultCnt() {
    printf("\nTotal no of page faults:%d", pgfaultcnt);
}

// FIFO Page Replacement Algorithm
void fifo() {
    initialize();
    for (i = 0; i < n; i++) {
        printf("\nFor %d :", in[i]);
        if (isHit(in[i]) == 0) {
            // Shift the pages in the frames to make space for the new page
            for (k = 0; k < nf - 1; k++)
                p[k] = p[k + 1];
            p[k] = in[i];
            pgfaultcnt++;
            dispPages();
        } else
            printf("No page fault");
    }
    dispPgFaultCnt();
}

// Optimal Page Replacement Algorithm
void optimal() {
    initialize();
    int near[50];
    for (i = 0; i < n; i++) {
        printf("\nFor %d :", in[i]);
        if (isHit(in[i]) == 0) {
            // Find the pages in the frames and their next occurrences in the sequence
            for (j = 0; j < nf; j++) {
                int pg = p[j];
                int found = 0;
                for (k = i; k < n; k++) {
                    if (pg == in[k]) {
                        near[j] = k;
                        found = 1;
                        break;
                    } else
                        found = 0;
                }
                if (!found)
                    near[j] = 9999;
            }
            // Choose the page with the farthest next occurrence to replace
            int max = -9999;
            int repindex;
            for (j = 0; j < nf; j++) {
                if (near[j] > max) {
                    max = near[j];
                    repindex = j;
                }
            }
            // Replace the selected page
            p[repindex] = in[i];
            pgfaultcnt++;
            dispPages();
        } else
            printf("No page fault");
    }
    dispPgFaultCnt();
}

// Least Recently Used (LRU) Page Replacement Algorithm
void lru() {
    initialize();
    int least[50];
    for (i = 0; i < n; i++) {
        printf("\nFor %d :", in[i]);
        if (isHit(in[i]) == 0) {
            // Find the pages in the frames and their most recent occurrences in the sequence
            for (j = 0; j < nf; j++) {
                int pg = p[j];
                int found = 0;
                for (k = i - 1; k >= 0; k--) {
                    if (pg == in[k]) {
                        least[j] = k;
                        found = 1;
                        break;
                    } else
                        found = 0;
                }
                if (!found)
                    least[j] = -9999;
            }
            // Choose the page with the least recent occurrence to replace
            int min = 9999;
            int repindex;
            for (j = 0; j < nf; j++) {
                if (least[j] < min) {
                    min = least[j];
                    repindex = j;
                }
            }
            // Replace the selected page
            p[repindex] = in[i];
            pgfaultcnt++;
            dispPages();
        } else
            printf("No page fault!");
    }
    dispPgFaultCnt();
}

int main() {
    int choice;
    while (1) {
        // Menu to choose the page replacement algorithm
        printf("\nPage Replacement Algorithms\n1.Enter data\n2.FIFO\n3.Optimal\n4.LRU\n5.Exit\nEnter your choice:");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                getData();
                break;
            case 2:
                fifo();
                break;
            case 3:
                optimal();
                break;
            case 4:
                lru();
                break;
            default:
                return 0;
                break;
        }
    }
}
